searchState.loadedDescShard("azalea_auth", 0, "Azalea Auth\nJust the important data\nAuthenticate with Microsoft. If the data isn’t cached, …\nCache auth information\nThe directory to store the cache in. If this is not set, …\nWhether we should check if the user actually owns the …\nIf you choose to use your own Microsoft authentication …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAuthenticate with Minecraft when we already have a …\nWait until the user logged into Microsoft with the given …\nGet the Microsoft link code that’s shown to the user for …\nAsks the user to go to a webpage and log in with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf you want to use custom scope instead of default one, …\nTell Mojang you’re joining a multiplayer server.\nSeconds since the UNIX epoch\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the data if it’s not expired, otherwise return …\nGets cached data for the given email.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMinecraft auth\nMicrosoft auth\nThe user’s Minecraft profile (i.e. username, UUID, skin)\nXbox Live auth\nA chat signing certificate.\nDate like <code>2022-04-30T00:11:32.174783069Z</code>\nFetch the Mojang-provided key-pair for your player, which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe RSA private key.\n—–BEGIN RSA PRIVATE KEY—– … —–END RSA …\n—–BEGIN RSA PUBLIC KEY—– … —–END RSA PUBLIC …\nThe RSA public key encoded as DER.\nbase64 string; signed data\nbase64 string; signed data\nDate like <code>2022-04-29T16:11:32.174783069Z</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe username of the player.\nThe UUID of the player.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTell Mojang’s servers that you are going to join a …\nAsk Mojang’s servers if the player joining is …")