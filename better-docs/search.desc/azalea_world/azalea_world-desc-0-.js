searchState.loadedDescShard("azalea_world", 0, "The Minecraft world representation used in Azalea.\nA compact list of integers with the given number of bits …\nA world where the chunks are stored as weak pointers. This …\nA container of <code>Instance</code>s (aka worlds). Instances are …\nThe name of the <code>Instance</code> (world) the entity is in. If two …\nAn entity ID used by Minecraft. These are not guaranteed …\nKeep track of certain metadatas that are only relevant for …\nPartialInstances are usually owned by clients, and hold …\nCreates a completely self-contained <code>PartialInstance</code>. This …\nAn index of all the entities we know are in the chunks of …\nAn index of Minecraft entity IDs to Azalea ECS entities. …\nSome metadata about entities, like what entities are in …\nFind the coordinates of a block in the world.\nFind all the coordinates of a block in the world.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMake an empty world from this <code>ChunkStorage</code>. This is meant …\nReturns the argument unchanged.\nGet the data at the given index.\nGet a world from the container. Returns <code>None</code> if none of …\nAdd an empty world to the container (or not if it already …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterators for iterating over Minecraft blocks and chunks, …\nCreate a new BitStorage with the given number of bits per …\nThe entity id of the player that owns this partial world. …\nThe number of entries.\nA counter for each entity that tracks how many updates we…\nA single chunk in a world (16*?*16 blocks). This only …\nA storage for chunks where they’re only stored weakly, …\nAn efficient storage of chunks for a client that has a …\nA section of a chunk, i.e. a 16<em>16</em>16 block area.\nGet the actual stored view distance for the selected view …\nGet an iterator over all the chunks in the storage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the block state at the given position from a list of …\nHeightmaps are used for identifying the surface blocks in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a <code>Chunk</code> within render distance, or <code>None</code> if it’s not …\nGet a mutable reference to a <code>Chunk</code> within render distance, …\nSet a chunk in our limited storage, useful if your chunk …\nGet the index of where a section is in a chunk based on …\nSet a chunk in the shared storage and reference it from …\nUpdate the chunk to center the view on. This should be …\nGet the center of the view. This is usually the chunk that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an iterator over the top available block positions in …\nGet an iterator over the top block positions in this …\nUpdates the heightmap with the given block state at the …\nAn octahedron iterator, useful for iterating over blocks …\nA diagonal spiral iterator, useful for iterating over …\nA spiral iterator, useful for iterating over chunks in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChange the distance that this iterator won’t go past.\nA representation of the different types of chunk palettes …\nID of the corresponding entry in its global palette\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value at the given coordinates.\nSets the id at the given coordinates and return the …\nReturns the value at the given index.\nCalculates the index of the given coordinates.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is usually a list of unique values that appear in the …\nSets the id at the given coordinates and return the …\nSets the id at the given index and return the previous id. …\nCompacted list of indices pointing to entry IDs in the …")