searchState.loadedDescShard("azalea", 0, "Azalea is a framework for creating Minecraft bots.\nSomething that can join Minecraft servers.\nThe parameters that were passed for creating the …\nA player joined the game (or more specifically, was added …\nThe coordinates of a block in the world. For entities (if …\nA component that clients with <code>BotPlugin</code> will have. If you …\nA chat message was sent in the game chat.\n<code>Client</code> has the things that a user interacting with the …\nA builder for creating new <code>Client</code>s. This is the …\nA component that contains some of the “settings” for …\nThe client player died in-game.\nA <code>PluginGroup</code> for the plugins that add extra bot …\nThis plugin group will add all the default plugins …\nThe client disconnected from the server.\nSomething that happened in-game, such as a tick passing or …\nA chat component, basically anything you can see in chat.\nA component only present in players that contains the …\nHappens right after the bot switches into the Game state, …\nA component that keeps strong references to our …\nAn error that happened while joining the server.\nOptional settings when adding an account to a swarm or …\nA bundle for the components that are present on a local …\nEvent to jump once.\nA <code>KeepAlive</code> packet was sent by the server.\nThe client is now in the world. Fired when we receive a …\nMake an entity look towards a certain position in the …\nA marker that can be used in place of a State in …\nWe received a packet from the server.\nComponent for entities that can move and sprint. Usually …\nA player in the tab list.\nA player left the game (or maybe is still in the game and …\nThe directions that we can sprint in. It’s a subset of …\nAn event sent when the client starts sprinting. This does …\nAn event sent when the client starts walking. This does …\nA component that contains a map of player UUIDs to their …\nHappens 20 times per second, but only when the world is …\nA resource that contains a <code>broadcast::Sender</code> that will be …\nA player was updated in the tab list (gamemode, display …\nUsed to represent an exact position in the world where an …\nThe access token for authentication. You can obtain one of …\nThe parameters (i.e. email) that were passed for creating …\nAdd a group of plugins to the client.\nWhether the client should show up as “Anonymous Player”…\nAttack the entity with the given id.\nRight click a block. The behavior of this depends on the …\nGet the absolute center of a block position by adding 0.5 …\nThe certificates used for chat signing.\nImplementations of chat-related features.\nSend a message in chat.\nWhether the messages sent from the server should have …\nThe types of chat messages the client wants to receive. …\nUsed for Minecraft’s chunk batching introduced in 23w31a …\nGet a component from this client. This will clone the …\nSet the custom address that this bot will send in the …\nOverride the server address that this specific bot will …\nSet the custom resolved address that this bot will use to …\nOverride the socket address that this specific bot will …\nReturns the direction the client is looking. The first …\nReturn the look direction that would make a client at …\nDisconnect a client from the server.\nDisconnect this client from the server by ending all tasks.\nThe player’s display name in the tab list, but only if it…\nGet the distance from this position to another position. …\nGet the squared distance from this position to another …\nGet the squared distance from this position to another …\nReturn a new instance of this position with the y …\nReturn a new instance of this position with the y …\nReturn a new instance of this position with the x …\nReturn a new instance of this position with the x …\nThe entity component system. You probably don’t need to …\nThe entity for this client in the ECS.\nReturn a lightweight <code>Entity</code> for the entity that matches …\nGet a component from an entity. Note that this will return …\nDefines the <code>Event</code> enum and makes those events trigger when …\nGet the position of this client’s eyes.\nDisplay a position as <code>x y z</code>.\nDisplay a block position as <code>x y z</code>.\nThe main hunger bar. Goes from 0 to 20.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe current gamemode of the player, like survival or …\nGet a component from this client, or <code>None</code> if it doesn’t …\nGet a component from an entity, if it exists. This is …\nGet a handle to the open container. This will return None …\nGet a receiver that will receive a message every tick.\nSame as <code>goto</code>. but the bot won’t break any blocks while …\nDo a handshake with the server and get to the game state …\nWhether the player has an attack cooldown.\nGet the health of this client.\nGet the hunger level of this client, which includes both …\nThe world is the combined <code>PartialInstance</code>s of all clients …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecursively call the function for every component in this …\nConnect to a Minecraft server.\nQueue a jump for the next tick.\nReturns whether the player will try to jump next tick.\nThe locale of the client.\nThe player’s latency in milliseconds. The bars in the …\nWhen enabled, the bot will mine any block that it is …\nGet the distance of this vector to the origin by doing …\nGet the distance of this vector from the origin by doing …\nGet the distance of this vector to the origin by doing …\nGet the distance of this vector to the origin by doing …\nReturns whether we have a received the login packet yet.\nTurn the bot’s head to look at the coordinate in the …\nReturn the menu that is currently open. If no menu is …\nThis will create an online-mode account by authenticating …\nSimilar to <code>Account::microsoft</code> but you can use your own …\nMine a block. This won’t turn the bot’s head towards …\nStart building a client that can join the world.\nCreate a new client from the given <code>GameProfile</code>, ECS …\nCreate a new <code>InstanceHolder</code>.\n<code>Self::new</code> but without adding the plugins by default. This …\nReturn a new instance of this position with the z …\nReturn a new instance of this position with the z …\nAn offline account does not authenticate with Microsoft’…\nOpen a container in the world, like a chest. Use …\nOpen the player’s inventory. This will return None if …\nThe partial instance is the world this client currently …\nGet an <code>RwLock</code> with a reference to the world that this …\nA pathfinding plugin to make bots able to traverse the …\nPing Minecraft servers.\nGet the position of this client.\nThe position we want the entity to be looking at.\nMinecraft only sends a movement packet either after 20 …\nThe Azalea prelude. Things that are necessary for a …\nThe <code>GameProfile</code> for our client. This contains your …\nInformation about the player’s Minecraft account, …\nSet the proxy that this bot will use.\nThe Socks5 proxy that this bot will use.\nA convenience function for getting components of our player…\nRefresh the access_token for this account to be valid …\nRequest the certificates used for chat signing and set it …\nUse this to force the client to run the schedule outside …\nThe amount of saturation the player has. This isn’t …\nSend a chat message to the server. This only sends the …\nSend a command packet to the server. The <code>command</code> argument …\nTell the server we changed our game options (i.e. render …\nSets the direction the client is looking. <code>y_rot</code> is yaw …\nSet the function that’s called every time a bot receives …\nSet whether we’re jumping. This acts as if you held …\nSet the client state instead of initializing defaults.\nReturn a new instance of this position with the z …\nReturn a new instance of this position with the z …\nStart sprinting in the given direction. To stop moving, …\nBuild this <code>ClientBuilder</code> into an actual <code>Client</code> and join …\nCreate a <code>Client</code> when you already have the ECS made with …\nDo the same as <code>Self::start</code>, but allow passing in custom …\nFind the difference between two positions.\nFind the difference between two positions.\nSwarms are a way to conveniently control many bots.\nGet a map of player UUIDs to their information in the tab …\nBorrowed from <code>bevy_core</code>.\nConvert this component into an ANSI string, so you can …\nConvert this component into an ANSI string.\nConvert the block position into a Vec3 without centering …\nReturn a new instance of this position with the y …\nReturn a new instance of this position with the y …\nGet the username of this client.\nThe Minecraft username of the account.\nGet the Minecraft UUID of this client.\nOnly required for online-mode accounts.\nThe player’s UUID.\nGet the UUID of this account. This will generate an …\nThe view distance of the client in chunks, same as the …\nStart walking in the given direction. To sprint, use …\nReturn a new instance of this position with the x …\nReturn a new instance of this position with the x …\nThis will create an online-mode account through …\nSimilar to <code>Account::with_microsoft_access_token</code> but you …\nGet an <code>RwLock</code> with a reference to our (potentially shared) …\nWrite a packet directly to the server.\nA plugin that makes it so bots automatically accept …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns how long it takes for the attack cooldown to reset …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA plugin that makes <code>DeathEvent</code>s send <code>PerformRespawnEvent</code>s.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the best tool in the hotbar for the given block.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA chat packet, either a system message or a chat message.\nA kind of chat packet, either a chat message or a command.\nA client received a chat message packet.\nSend a chat message (or command, if it starts with a …\nSend a chat packet to the server of a specific kind (chat …\nGet the content part of the message as a string. This does …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this message was sent with /msg (or aliases). It …\nGet the message shown in chat for this packet.\nCreate a new ChatPacket from a string. This is meant to be …\nDetermine the username of the sender and content of the …\nGet the username of the sender of the message. If it’s …\nGet the UUID of the sender of the message. If it’s not a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA handle to the open container. The container will be …\nA handle to a container that may be open. This does not …\nReturns the item slots in the container, not including the …\nReturns the item slots in the container, not including the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the id of the container. If this is 0, that means it’…\nGet the id of the container. If this is 0, that means it’…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the menu of the container. If the container is …\nReturns the menu of the container. If the container is …\nAn event sent when a client is getting disconnected.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSystem that removes the <code>JoinedClientBundle</code> from the entity …\nA player joined the game (or more specifically, was added …\nA chat message was sent in the game chat.\nThe client player died in-game.\nThe client disconnected from the server.\nSomething that happened in-game, such as a tick passing or …\nHappens right after the bot switches into the Game state, …\nA <code>KeepAlive</code> packet was sent by the server.\nA component that contains an event sender for events that …\nThe client is now in the world. Fired when we receive a …\nWe received a packet from the server.\nA player left the game (or maybe is still in the game and …\nHappens 20 times per second, but only when the world is …\nA player was updated in the tab list (gamemode, display …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRight click a block. The behavior of this depends on the …\nA component that contains the number of changes this …\nA component that contains the block that the player is …\nA plugin that allows clients to interact with blocks in …\nSwing your arm. This is purely a visual effect and won’t …\nCheck if the item has the <code>CanDestroy</code> tag for the block.\nWhether we can’t interact with the block, based on your …\nThe local player entity that’s opening the container.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the block that a player would be looking at if their …\nThe coordinates of the container.\nClose a container without notifying the server.\nTell the server that we want to close a container.\nA component present on all local players that have an …\nEither an item in an inventory or nothing.\nAn item in an inventory, with a count and NBT. Usually you …\nA menu, which is a fixed collection of slots.\nSent from the server when a menu (like a chest or crafting …\nSent from the server when the contents of a container are …\nA fixed-size list of <code>ItemSlot</code>s.\nGet the <code>Player</code> from this <code>Menu</code>.\nConvert this slot into an <code>ItemSlotData</code>, if it’s present.\nThe item that is currently held by the cursor. <code>Slot::Empty</code> …\nRepresentations of various inventory data structures in …\nThe current container menu that the player has open. If no …\nThe custom name of the menu that’s currently open. This …\nReturn the contents of the menu, not including the player…\nReturn the amount of the item in the slot, or 0 if the …\nThe amount of the item in this slot.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the item in the player’s hotbar that is currently …\nGet the range of slot indexes that contain the player’s …\nThe ID of the container that’s currently open. Its value …\nThe ID of the container to close. 0 for the player’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA component that contains the player’s inventory menu. …\nCheck if the slot is ItemSlot::Empty, if the count is &lt;= …\nCheck if the count of the item is &lt;= 0 or if the item is …\nReturns whether the given protocol index is in the player…\nReturns whether the given index would be in the player’s …\nCheck if the slot is not ItemSlot::Empty, if the count is …\nWhether this item is the same as another item, ignoring …\nGet the <code>kind</code> of the item in this slot, or …\nReturns the number of slots in the menu.\nGet the maximum number of items that can be placed in this …\nWhether the item in the given slot could be clicked and …\nWhether the given item could be placed in this menu.\nReturns a reference to the currently active menu. If a …\nReturns a mutable reference to the currently active menu. …\nGet the range of slot indexes that contain the player’s …\nGet the range of slot indexes that contain the player’s …\nA set of the indexes of the slots that have been right …\nShift-click a slot in this menu.\nThe index of the item in the hotbar that’s currently …\nModify the inventory as if the given operation was …\nGet a reference to the <code>ItemSlot</code> at the given protocol …\nThe hotbar slot to select. This should be in the range …\nGet a mutable reference to the <code>ItemSlot</code> at the given …\nReturn the contents of the menu, including the player’s …\nRemove <code>count</code> items from this slot, returning the removed …\nRemove <code>count</code> items from this slot, returning the removed …\nAn identifier used by the server to track client inventory …\nUpdate whether this slot is empty, based on the count.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the maximum stack size for this item.\nWhether this item can be stacked with other items.\nAdd slot\nAdd a slot.\nCtrl + drop key (Q)\nMiddle click, only defined for creative players in …\nEnding drag\nEnding drag\nLeft mouse click. Note that in the protocol, None is …\nShift + left mouse click\nDrop cursor stack.\nDouble click\nShift click\nRight mouse click. Note that in the protocol, None is …\nShift + right mouse click (identical behavior)\nDrop cursor single item.\nDrop key (Q)\nStarting drag\nStarting drag\nUsed when you press number keys or F in an inventory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImpossible in vanilla clients.\nThe slot that we’re double clicking on. It should be …\nReturn the slot number that this operation is acting on, …\nA player left clicked on a block, used for stuff like …\nSent when we completed mining a block.\nA component that simulates the client holding down left …\nA component that stores the position of the block we’re …\nA component bundle for players that can mine blocks.\nA component that counts down until we start mining the …\nA component that contains the item we’re currently using …\nA plugin that allows clients to break blocks in the world.\nA component that stores the progress of the current mining …\nA component that stores the number of ticks that we’ve …\nInformation about the block we’re currently mining. This …\nStart mining the block at the given position.\nAbort mining a block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn event sent by the server that sets or adds to our …\nA component that contains the look direction that was last …\nComponent for entities that can move and sprint. Usually …\nThe directions that we can sprint in. It’s a subset of …\nAn event sent when the client starts sprinting. This does …\nAn event sent when the client starts walking. This does …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe system that makes the player start sprinting when they …\nThe system that makes the player start walking when they …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes the bot do one physics tick. Note that this is …\nMinecraft only sends a movement packet either after 20 …\nThis system parameter can be used as a shorthand for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis function get an iterator over all nearby entities to …\nThis function get an iterator over all nearby entities to …\nGets the nearest entity to the given entity. This method …\nGets the nearest entity to the given position and world …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn event for sending a packet to the server while we’re …\nThe client entity that received the packet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe packet that was actually received.\nA player joined the game (or more specifically, was added …\nEvent for when an entity dies. dies. If it’s a local …\nAn instance (aka world, dimension) was loaded by a client.\nA KeepAlive packet is sent from the server to verify that …\nAn event that’s sent when we receive a packet.\nA player left the game (or maybe is still in the game and …\nAn event for sending a packet to the server while we’re …\nA player was updated in the tab list of a local player …\nThe client entity that received the packet.\nThe local player entity that received this event.\nThe local player entity that received this event.\nThe local player entity that received this event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the keepalive. This is an arbitrary number, but …\nThe random ID for this request to download the resource …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe packet that was actually received.\nPlugins can add to this set if they want to handle a …\nAn event that’s sent when we receive a login packet from …\nEvent for sending a login packet to the server.\nThe client entity that received the packet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe packet that was actually received.\nA component that’s present on clients that are actively …\nA component that makes this client able to pathfind.\nA component that makes bots run /particle commands while …\nWhether the bot is allowed to break blocks while …\nChecks whether the path has been obstructed, and returns …\nIf false, then let the current movement finish before …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe goals that a pathfinder can try to reach.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimulate the Minecraft world, currently only used for …\nThe function that’s used for checking what moves are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to reach both of the given goals.\nTry to reach all the given goals.\nMove to the given block position.\nDo the opposite of the given goal.\nDo either of the given goals, whichever is closer.\nDo any of the given goals, whichever is closest.\nGet within the given radius of the given position.\nMove to a position where we can reach the given block.\nMove to the given block position, ignoring the y-axis.\nMove to the given y coordinate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether the entity is at the node and should start …\nUse the context to determine what events should be sent to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether we’ve reached the target.\nMine the block at the given position. Returns whether the …\nMine the given block, but make sure the player is standing …\nReturns whether this block could be mined.\nThe last node that we reached.\nThe last node that we reached.\nThe node that we’re trying to reach.\nThe node that we’re trying to reach.\nSimulate the Minecraft world to see if certain movements …\nA set of simulations, useful for efficiently doing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn efficient representation of the world used for the …\nReturns how much it costs to break this block. Returns 0 …\nGet the amount of air blocks until the next solid block …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhether this block is passable\nwhether this block has a solid hitbox (i.e. we can stand …\nWhether this block and the block above are passable\nWhether we can stand in this position. Checks if the block …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPing a Minecraft server.\nPing a Minecraft server after we’ve already created a …\nPing a Minecraft server through a Socks5 proxy.\nSomething that can join Minecraft servers.\nA player joined the game (or more specifically, was added …\nA chat message was sent in the game chat.\n<code>Client</code> has the things that a user interacting with the …\nA data type that can be used to store data for an entity.\nThe client player died in-game.\nThe client disconnected from the server.\nSomething that happened in-game, such as a tick passing or …\nA Bevy schedule that runs every Minecraft game tick, i.e. …\nHappens right after the bot switches into the Game state, …\nA <code>KeepAlive</code> packet was sent by the server.\nThe client is now in the world. Fired when we receive a …\nWe received a packet from the server.\nA player left the game (or maybe is still in the game and …\nA type that can be inserted into a <code>World</code> as a singleton.\nA marker type indicating the storage type used for this …\nHappens 20 times per second, but only when the world is …\nA player was updated in the tab list (gamemode, display …\nThe access token for authentication. You can obtain one of …\nThe parameters (i.e. email) that were passed for creating …\nThe certificates used for chat signing.\nThe entity component system. You probably don’t need to …\nThe entity for this client in the ECS.\nReturns the argument unchanged.\nGet a receiver that will receive a message every tick.\nCalls <code>U::from(self)</code>.\nQueue a jump for the next tick.\nTurn the bot’s head to look at the coordinate in the …\nMine a block. This won’t turn the bot’s head towards …\nThe <code>GameProfile</code> for our client. This contains your …\nUse this to force the client to run the schedule outside …\nThe Minecraft username of the account.\nOnly required for online-mode accounts.\nA component for clients that can read and write packets to …\nStop every active task when this <code>RawConnection</code> is dropped.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the connection is still alive.\nWrite the packet with the given state to the server.\nTell the server that we’re respawning.\nA plugin that makes <code>PerformRespawnEvent</code> send the packet to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAt least one bot received a chat message.\nThis plugin group will add all the default plugins …\nA bot got disconnected from the server.\nThe swarm was created. This is only fired once, and it’s …\nAll the bots in the swarm have successfully joined the …\nA marker that can be used in place of a SwarmState in …\nA swarm is a way to conveniently control many bots at …\nCreate a new <code>Swarm</code>.\nAn event about something that doesn’t have to do with a …\nAdd a new account to the swarm. You can remove it later by …\nAdd a single new <code>Account</code> to the swarm. Use …\nAdd an account with a custom initial state. Use just …\nAdd an account with a custom initial state. Use just …\nSame as <code>Self::add_account_with_state</code>, but allow passing in …\nAdd a vec of <code>Account</code>s to the swarm.\nAdd a new account to the swarm, retrying if it couldn’t …\nSame as <code>Self::add_and_retry_forever</code>, but allow passing …\nAdd one or more plugins to this swarm.\nAdd a new account to the swarm, using custom options. This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over the bots in this swarm.\nSet how long we should wait between each bot joining the …\nStart creating the swarm.\n<code>Self::new</code> but without adding the plugins by default. This …\nA prelude that re-exports common swarm types in Azalea.\nSet the function that’s called every time a bot receives …\nSet the function that’s called every time the swarm …\nSet the swarm state instead of initializing defaults.\nBuild this <code>SwarmBuilder</code> into an actual <code>Swarm</code> and join the …\nDo the same as <code>Self::start</code>, but allow passing in default …\nHelper for configuring and creating the default task …\nSetup of default task pools: <code>AsyncComputeTaskPool</code>, …\nDefines a simple way to determine how many threads to use …\nUsed to determine number of async compute threads to …\nUsed to determine number of compute threads to allocate\nInserts the default thread pools into the given resource …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to determine number of IO threads to allocate\nUnder no circumstance use more than this many threads for …\nIf the number of physical cores is greater than …\nForce using at least this many threads\nIf the number of physical cores is less than …\nTarget using this percentage of total cores, clamped by …\nOptions for the <code>TaskPool</code> created at application start.")